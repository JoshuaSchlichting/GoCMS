// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
	"encoding/json"
)

const createUser = `-- name: CreateUser :one
INSERT INTO public.user (
    name, email, attributes, created_at, updated_at
) VALUES (
  $1, $2, $3, current_timestamp, current_timestamp
)
RETURNING id, organization_id, name, email, attributes, created_at, updated_at
`

type CreateUserParams struct {
	Name       string          `json:"name"`
	Email      string          `json:"email"`
	Attributes json.RawMessage `json:"attributes"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Attributes)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Email,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public.user
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, organization_id, name, email, attributes, created_at, updated_at FROM public.user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Email,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, organization_id, name, email, attributes, created_at, updated_at FROM public.user
WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Email,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIsInGroup = `-- name: GetUserIsInGroup :one
select true
from
  public.user_usergroup
  left join public.usergroup
    on user_usergroup.usergroup_id = usergroup.id
where user_id = $1::bigserial and usergroup.name = $2::text
`

type GetUserIsInGroupParams struct {
	UserID        int64  `json:"user_id"`
	UsergroupName string `json:"usergroup_name"`
}

func (q *Queries) GetUserIsInGroup(ctx context.Context, arg GetUserIsInGroupParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getUserIsInGroup, arg.UserID, arg.UsergroupName)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const listFiles = `-- name: ListFiles :many
SELECT id, name, blob, created_at, updated_at, owner_id FROM public.file
ORDER BY name
`

func (q *Queries) ListFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Blob,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, name, email, attributes, created_at, updated_at FROM public.organization
ORDER BY name
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, organization_id, name, email, attributes, created_at, updated_at FROM public.user
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Email,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
update public.organization
  set name = $2,
    updated_at = current_timestamp
WHERE id = $1
RETURNING id, name, email, attributes, created_at, updated_at
`

type UpdateOrganizationParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.ID, arg.Name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE public.user
  set name = $2,
    email = $3,
    attributes = $4,
    updated_at = current_timestamp
WHERE id = $1
RETURNING id, organization_id, name, email, attributes, created_at, updated_at
`

type UpdateUserParams struct {
	ID         int64           `json:"id"`
	Name       string          `json:"name"`
	Email      string          `json:"email"`
	Attributes json.RawMessage `json:"attributes"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Attributes,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Email,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const uploadFile = `-- name: UploadFile :one
INSERT INTO public.file (
    name, blob, created_at, updated_at, owner_id
) VALUES (
  $1, $2, current_timestamp, current_timestamp, $3
)
RETURNING id, name, blob, created_at, updated_at, owner_id
`

type UploadFileParams struct {
	Name    string `json:"name"`
	Blob    []byte `json:"blob"`
	OwnerID int32  `json:"owner_id"`
}

func (q *Queries) UploadFile(ctx context.Context, arg UploadFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, uploadFile, arg.Name, arg.Blob, arg.OwnerID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Blob,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}
